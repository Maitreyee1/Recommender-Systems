# -*- coding: utf-8 -*-
"""Rating-based Recommender Systems.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EQTxQAPGapLxBCA3DsYafq_lSDS-aBdR

#Rating based Collaborative Recommender System
System to recommend similar movies based on rating given by users for a particular movie.

MovieLens Dataset: [Download ml-latest-small.zip](https://grouplens.org/datasets/movielens/latest/)

Collaborative filtering is that if a user A likes products X and Y, and if another user B likes product X, there is a fair bit of chance that he will like the product Y as well.

For movie recommender system, suppose a huge number of users have assigned the same ratings to movies X and Y. A new user comes who has assigned the same rating to movie X but hasn't watched movie Y yet. Collaborative filtering system will recommend him the movie Y.
"""

import numpy as np
import pandas as pd

ratings_data = pd.read_csv("ratings.csv")
ratings_data.head()

movie_names = pd.read_csv("movies.csv")
movie_names.head()

"""Join dataframes to display Userid and its rating for a movie name/title"""

movie_data = pd.merge(ratings_data, movie_names, on='movieId')
movie_data.head()

"""##Average rating of each movie 
Group the dataset by the title of the movie.

Calculate the mean of the rating for each movie.

Sort Movies according to descending order of ratings


"""

movie_data.groupby('title')['rating'].mean().sort_values(ascending=False).head()

"""Count number of ratings and display in descending order"""

movie_data.groupby('title')['rating'].count().sort_values(ascending=False).head()

"""Combine number of ratings and average rating in a dataframe"""

ratings_mean_count = pd.DataFrame(movie_data.groupby('title')['rating'].mean())
ratings_mean_count['rating_counts'] = pd.DataFrame(movie_data.groupby('title')['rating'].count())
ratings_mean_count.head()

"""Number of ratings"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('dark')
# %matplotlib inline

plt.figure(figsize=(8,6))
plt.rcParams['patch.force_edgecolor'] = True
plt.xlabel('Number of ratings')
plt.ylabel('Number of movies')
plt.xlim([0,120])


ratings_mean_count['rating_counts'].hist(bins=20)

"""Average ratings"""

plt.figure(figsize=(8,6))
plt.rcParams['patch.force_edgecolor'] = True
plt.xlabel('Average Ratings')
plt.ylabel('Number of movies')

ratings_mean_count['rating'].hist(bins=50)

"""Weak normal distribution of average ratings

Mean around 3.5

Most users rate movies in integer like 1,2,3 etc.

Number of ratings vs average ratings
"""

plt.figure(figsize=(8,6))
plt.rcParams['patch.force_edgecolor'] = True
# plt.xlabel('Average Ratings')
# plt.ylabel('Number of ratings')

sns.jointplot(x='rating', y='rating_counts', data=ratings_mean_count, alpha=0.4)

"""Thus, high rated movies tend to have more number of ratings

#Movie Preference Similarity 
Group data according to user and voted movie rating
"""

user_movie_rating = movie_data.pivot_table(index='userId', columns='title', values='rating')
user_movie_rating.head(5)

"""Ratings for Forrest Gump"""

forrest_gump_ratings = user_movie_rating['Forrest Gump (1994)']
forrest_gump_ratings.head()

"""Based on user ratings for Forrest Gump, group movies similar to Forrest Gump"""

movies_like_forrest_gump = user_movie_rating.corrwith(forrest_gump_ratings)
#Dataframe with Movie and correlation with Forrest Gump
corr_forrest_gump = pd.DataFrame(movies_like_forrest_gump, columns=['Correlation'])
#Remove Null values
corr_forrest_gump.dropna(inplace=True)
corr_forrest_gump.head()

corr_forrest_gump.sort_values('Correlation', ascending=False).head(10)

"""Correlation alone is not enough to effective suggest similar movies.

Consider number of ratings greater 50 as additional feature to suggest similar movies.
"""

corr_forrest_gump = corr_forrest_gump.join(ratings_mean_count['rating_counts'])
corr_forrest_gump.head()

corr_forrest_gump[corr_forrest_gump ['rating_counts']>50].sort_values('Correlation', ascending=False).head(10)

"""Reference: https://stackabuse.com/creating-a-simple-recommender-system-in-python-using-pandas/"""